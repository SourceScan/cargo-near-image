name: Publish docker image on Rust and cargo-near release

on:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight
  workflow_dispatch:

jobs:
  check_releases:
    runs-on: ubuntu-latest

    outputs:
      rust_version: ${{ steps.get_rust_version.outputs.latest_version }}
      cargo_near_version: ${{ steps.get_cargo_near_version.outputs.latest_version }}
      image_exists: ${{ steps.check_docker_image.outputs.image_exists }}

    steps:
      - name: Check out the main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Downaload stable rust release channel manifest
        run: curl -o channel-rust-stable.toml -sSL https://static.rust-lang.org/dist/channel-rust-stable.toml

      - name: Apply yq filter on downloaded rust manifest 
        id: get_rust_version_string_from_toml
        uses: mikefarah/yq@master
        with:
          cmd:  yq -oy -p toml '.pkg.rust.version' channel-rust-stable.toml

      - name: Get latest Rust version
        id: get_rust_version
        run: |
          latest_version=$(echo "${{ steps.get_rust_version_string_from_toml.outputs.result }}" |  cut -d' ' -f1)
          latest_version=${latest_version#v}  # Remove 'v' prefix if exists
          echo "latest_version=$latest_version" >> $GITHUB_ENV
          echo "latest_version=$latest_version"
          echo "latest_version=$latest_version" >> $GITHUB_OUTPUT

      - name: Get latest cargo-near version
        id: get_cargo_near_version
        run: |
          latest_version=$(curl -s https://api.github.com/repos/near/cargo-near/releases | jq -r '.[] | .tag_name' | grep -v build | grep cargo-near | head -n 1)
          latest_version=${latest_version#cargo-near-v}  # Remove 'cargo-near-v' prefix if exists
          echo "latest_version=$latest_version" >> $GITHUB_ENV
          echo "latest_version=$latest_version"
          echo "latest_version=$latest_version" >> $GITHUB_OUTPUT

      - name: Check if Docker image with the tag exists
        id: check_docker_image
        run: |
          tag_exists=$(curl -s -o /dev/null -w "%{http_code}" https://hub.docker.com/v2/repositories/sourcescan/cargo-near/tags/${{ steps.get_cargo_near_version.outputs.latest_version }}-rust-${{ steps.get_rust_version.outputs.latest_version }})
          if [ "$tag_exists" -eq 200 ]; then
            echo "image_exists=true" >> $GITHUB_OUTPUT
          else
            echo "image_exists=false" >> $GITHUB_OUTPUT
          fi

  build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: check_releases
    if: needs.check_releases.outputs.image_exists == 'false'

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Build Docker image
        run: docker build -t cargo-near:${{ needs.check_releases.outputs.rust_version }} --build-arg RUST_VERSION=${{ needs.check_releases.outputs.rust_version }} --build-arg CARGO_NEAR_VERSION=${{ needs.check_releases.outputs.cargo_near_version }} .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: |
          docker tag cargo-near:${{ needs.check_releases.outputs.rust_version }} sourcescan/cargo-near:${{ needs.check_releases.outputs.cargo_near_version }}-rust-${{ needs.check_releases.outputs.rust_version }}
          docker push sourcescan/cargo-near:${{ needs.check_releases.outputs.cargo_near_version }}-rust-${{ needs.check_releases.outputs.rust_version }}
